#!/usr/bin/env python3# -*- coding: utf-8 -*-"""@author: Luis Miguel Gómez Londoño - 201729597Universidad de los Andes 2020-20Introduccion a Modelos Matematicos en Gestion FinancieraProfesor: Rene Meziat"""import numpy as npimport math as mimport matplotlib.pyplot as pltimport subprocess, os, platformimport randomfrom scipy.stats import binom#Herramienta para abrir un archivo basado en el sistema operativo en el que se corradef abrirArchivoOS(filepath: str):    if platform.system() == 'Darwin':       # macOS        subprocess.call(('open', filepath))    elif platform.system() == 'Windows':    # Windows        os.startfile(filepath)    else:                                   # linux        subprocess.call(('xdg-open', filepath))#Punto 1: En esta funcion se genera y se grafica un arbol binomial basado en los#parametros ingresados por el usuario#n: Numero de periodos#S: Precio inicial#u: Factor de valorización#d: Factor de depreciación#p: Probabilidaddef ArbolBinomial(n: int, S: int, u: int, d: int, p: float, graficarDatos: bool):    #Definimos arreglo vacio de tamaño n    X = np.arange(n)    #Definimos el precio Inicial    X[0] = S    for i in range(n-1):        #Se asigna el precio s actual         s = X[i]        #Calcula la variable aleatoria con probabilidad p        r = binom.rvs(1,p)        #Si la VA es igual a 1.        if (r==1):            X[i+1] = u*s        else:             X[i+1] = d*s        if(graficarDatos):        #Definimos los parametros de la grafica        fig = plt.figure(figsize=(8,4),dpi=200)        ax = fig.add_subplot(111)        ax.scatter(np.arange(n), X, c='blue',alpha=0.25)        ax.plot(X,c='blue',alpha=0.5,lw=0.5,ls='-',)        textstr = '\n'.join((            r'$\mathrm{n}=%.0f$' % (n, ),            r'$\mathrm{S}=%.2f$' % (S, ),            r'$\mathrm{u}=%.2f$' % (u, ),            r'$\mathrm{d}=%.2f$' % (d, ),            r'$\mathrm{p}=%.2f$' % (p, )))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)                # ubicar una leyenda en la parte superior izquierda con los parametros.        ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,                verticalalignment='top', bbox=props)        plt.title("Punto 1: Arbol binomial")        #Guardamos la figura en la carpeta del punto y la abrimos        nombreFig = './data/Punto1/p1.png'        plt.savefig(nombreFig,dpi=250)                #Guardamos el resultado numerico en la carpeta y la abrimos        nombreTxt = './data/Punto1/p1.txt'        np.savetxt(nombreTxt, X, fmt='%.0f')                #Proceso para abrir el archivo dependiendo del sistema operativo        abrirArchivoOS(nombreFig)        abrirArchivoOS(nombreTxt)        return X#print(ArbolBinomial(10, 5000, 1.2, 0.8, 0.6))#Punto 2: Simulacion con riesgo neutral.#n: Numero de periodos#S: Precio inicial#u: Factor de valorización#d: Factor de depreciación#p: r Tasa Libre de Riesgodef ArbolTLR(n: int, S: int, u: int, d: int, r: float, graficarDatos: bool):    X = np.arange(n)    X[0] = S    for i in range(n-1):        s=X[i]        if (d<1+r<u):            X[i+1] = (1+r)*s        else:            print("ERROR")            break    if(graficarDatos):        #Definimos los parametros de la grafica        fig = plt.figure(figsize=(8,4),dpi=200)        ax = fig.add_subplot(111)        ax.scatter(np.arange(n), X, c='blue',alpha=0.25)        ax.plot(X,c='blue',alpha=0.5,lw=0.5,ls='-',)        textstr = '\n'.join((                r'$\mathrm{n}=%.0f$' % (n, ),                r'$\mathrm{S}=%.2f$' % (S, ),                r'$\mathrm{u}=%.2f$' % (u, ),                r'$\mathrm{d}=%.2f$' % (d, ),                r'$\mathrm{r}=%.3f$' % (r, )))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)                        # ubicar una leyenda en la parte superior izquierda con los parametros.        ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,                    verticalalignment='top', bbox=props)        plt.title("Punto 2: Arbol binomial con tasa libre de riesgo.")        #Guardamos la figura en la carpeta del punto y la abrimos        nombreFig = './data/Punto2/p2.png'        plt.savefig(nombreFig,dpi=250)                #Guardamos el resultado numerico en la carpeta y la abrimos        nombreTxt = './data/Punto2/p2.txt'        np.savetxt(nombreTxt, X, fmt='%.0f')                #Proceso para abrir el archivo dependiendo del sistema operativo        abrirArchivoOS(nombreFig)        abrirArchivoOS(nombreTxt)        return X#Punto 3.1: Metodo para crear camino aleatorio simetrico para usar luego...def generarCaminoAleatorio(n: int, ascenso: int, descenso: int, p: float, graficarDatos: bool, titulo: str, nombreFig: str):    M = np.arange(n)    M[0] = 0    #Tomamos el primer valor para luego graficarlo    inicio = M[:1]    for i in range(n-1):        m = M[i]        r = binom.rvs(1, p)        if(r==1):            M[i+1]=m+ascenso        else:            M[i+1]=m-descenso        if(graficarDatos):        #Graficamos el camino aleatorio        fig = plt.figure(figsize=(8,4),dpi=200)        ax = fig.add_subplot(111)        ax.scatter(np.arange(n), M, c='blue',alpha=0.25)        ax.plot(M,c='blue',alpha=0.5,lw=0.5,ls='-',)        ax.plot(0, inicio, c='red', marker='+')        textstr = '\n'.join((                r'$\mathrm{n}=%.0f$' % (n, ),                r'$\mathrm{Ascenso}=%.2f$' % (ascenso, ),                r'$\mathrm{Descenso}=%.2f$' % (descenso, ),                r'$\mathrm{p}=%.2f$' % (p, )))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)        # ubicar una leyenda en la parte superior izquierda con los parametros.        ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,                    verticalalignment='top', bbox=props)        plt.title('{}: Camino Aleatorio Usado'.format(titulo))        #Guardamos la figura en la carpeta del punto y la abrimos        plt.savefig(nombreFig,dpi=250)        abrirArchivoOS(nombreFig)        return M#print(generarCaminoAleatorioSimetrico(10000, True))    def evolucionPreciosSimetrico(n: int, sigma: float, graficarDatos: bool):    camino = generarCaminoAleatorio(n, 1, 1, 0.5, graficarDatos, "Punto 3", './data/Punto3/p3CaminoAleatorio.png')    precios = []    nombreTxt = './data/Punto3/p3EvolucionPrecios.txt'    with open(nombreTxt, 'w') as writer:        writer.write("Evolucion de precios Sn: \n")        writer.write("N = {} , Sigma = {} \n".format(n, sigma))        for i in camino:            mn = i.item()            sn = m.exp(sigma*mn) * m.pow((2/(m.exp(sigma)+m.exp(-sigma))), n )            precios.append(sn)            writer.write("Con Mn = {}, el precio es {} \n".format(int(mn), sn))                if(graficarDatos):        #Graficamos        fig = plt.figure(figsize=(8,4),dpi=200)        ax = fig.add_subplot(111)        ax.scatter(np.arange(n), precios, c='blue',alpha=0.25)        ax.plot(precios,c='blue',alpha=0.5,lw=0.5,ls='-',)        textstr = '\n'.join((            r'$\mathrm{n}=%.2f$' % (n, ),            r'$\sigma=%.2f$' % (sigma, )))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)        # ubicar una leyenda en la parte superior izquierda con los parametros.        ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,                verticalalignment='top', bbox=props)        plt.title('Punto 3: Evolucion De Precios')        plt.xlabel("n")        plt.ylabel("Sn")        #Guardamos la figura en la carpeta del punto y la abrimos        nombreFig = './data/Punto3/p3EvolucionPrecios.png'        plt.savefig(nombreFig,dpi=250)        abrirArchivoOS(nombreFig)        abrirArchivoOS(nombreTxt)    return precios        #evolucionPreciosSimetrico(10, 2, True)def evolucionPrecioGeneral(n: int, sigma: float, arriba: float, abajo: float, p: float, graficarDatos: bool):    camino = generarCaminoAleatorio(n, arriba, abajo, p, graficarDatos, "Punto 4", './data/Punto4/p4CaminoAleatorio.png')    precios = []    nombreTxt = './data/Punto4/p4EvolucionPrecios.txt'    with open(nombreTxt, 'w') as writer:        writer.write("Evolucion de precios Sn: \n")        writer.write("N = {} , Sigma = {} \n".format(n, sigma))        for mn in camino:            sn = m.exp(sigma*mn) * m.pow((2/(m.exp(sigma)+m.exp(-sigma))), n )            precios.append(sn)            writer.write("Con Mn = {}, el precio es {} \n".format(int(mn), sn))        if(graficarDatos):        #Graficamos        fig = plt.figure(figsize=(8,4),dpi=200)        ax = fig.add_subplot(111)        ax.scatter(np.arange(n), precios, c='blue',alpha=0.25)        ax.plot(precios,c='blue',alpha=0.5,lw=0.5,ls='-',)        textstr = '\n'.join((                r'$\mathrm{n}=%.0f$' % (n, ),                r'$\sigma=%.2f$' % (sigma, ),                r'$\mathrm{Ascenso}=%.2f$' % (arriba, ),                r'$\mathrm{Descenso}=%.2f$' % (abajo, ),                r'$\mathrm{p}=%.2f$' % (p, )))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)        # ubicar una leyenda en la parte superior izquierda con los parametros.        ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,                    verticalalignment='top', bbox=props)        plt.title('Punto 4: Evolucion De Precios')        plt.xlabel("n")        plt.ylabel("Sn")        #Guardamos la figura en la carpeta del punto y la abrimos        nombreFig = './data/Punto4/p4EvolucionPrecios.png'        plt.savefig(nombreFig,dpi=250)        abrirArchivoOS(nombreFig)        abrirArchivoOS(nombreTxt)    return precios    #evolucionPrecioGeneral(10, 2, 0.5, 0.5, True)#TPS: Vector de paradas y decisiones. Por ejemplo [2, -1, 3, 1]#Quiere decir, en n = 2 baje -1, y en n = 3 suba 1def tiemposDeParada(n: int, ascenso: float, descenso: float, p: float, TPS: list):    M = np.arange(n)    M[0] = 0    paradas=[]    decisiones=[]    #Sacamos los pares.    for z in range(len(TPS)):        if z % 2 == 0:            paradas.append(TPS[z])        else:            decisiones.append(TPS[z])        for i in range(n-1):        m = M[i]        for j in range(len(paradas)):            if(paradas[j]==i):                if(decisiones[j]==1):                    M[i+1] = m + ascenso                    break                else:                    M[i+1] = m - descenso                    break            else:                 r = binom.rvs(1, p)                if(r==1):                    M[i+1]=m+ascenso                else:                    M[i+1]=m-descenso    return M#Punto 5def tiempoAlcance(n: int, ascenso: int, p: float, nivel: int, TPS: list, graficarDatos: bool):    camino = tiemposDeParada(n, ascenso, ascenso, p, TPS)    #Calculamos el limite    l = camino[0] + (nivel*ascenso)    #Definimos el contador del tiempo    t = 0    #Hacemos un booleano para saber si ya llego al nivel (para el caso que no alcance a llegar...)    llego = False        for i in range(n-1):        if(nivel >= 0):            if(camino[i] >= l):                llego = True                #Quiere decir que llegamos por arriba                break        else:            if(camino[i] <= l):                llego = True                #Quiere decir que llegamos por abajo                break        t += 1        if(camino[-1] == nivel):        llego = True        if(graficarDatos):        #Graficamos        fig = plt.figure(figsize=(8,4),dpi=200)        ax = fig.add_subplot(111)        ax.scatter(np.arange(n), camino, c='blue',alpha=0.25)        ax.plot(camino,c='blue',alpha=0.5,lw=0.5,ls='-',)        plt.axhline(y=l, xmin=0, xmax=n, color='r')        cadenaLlego = t        if(not llego):            cadenaLlego = "No llegó."        textstr = '\n'.join((                r'$\mathrm{n}=%.0f$' % (n, ),                r'$\mathrm{Ascenso}=%.2f$' % (ascenso, ),                r'$\mathrm{Descenso}=%.2f$' % (-ascenso, ),                r'$\mathrm{Nivel}=%.2f$' % (nivel, ),                "T Llegada= {}".format(cadenaLlego)))        props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)        # ubicar una leyenda en la parte superior izquierda con los parametros.        ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,                    verticalalignment='top', bbox=props)        plt.title('Punto 5: Evolucion De Precios.')        #Guardamos la figura en la carpeta del punto y la abrimos        nombreFig = './data/Punto5/p5EvolucionPrecios.png'        plt.savefig(nombreFig,dpi=250)        abrirArchivoOS(nombreFig)            return t, camino#Punto 6def sacar10Simulaciones():    #Punto 1 -------------------------------------------------    nombreTxt1 = './data/Punto6/p1Parametros.txt'    n = 10    S = 5000    u = 1.2    d = 0.8    p = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]    fig = plt.figure(figsize=(8,4),dpi=200)    ax = fig.add_subplot(111)    with open(nombreTxt1, 'w') as writer:        writer.write("PARAMETROS PUNTO 1 \n")        for i in range(n):            writer.write("Simulacion {}: n = {} , S = {} , u = {} , d = {}, p = {} \n".format(i+1, n, S, u, d, p[i]))            X = ArbolBinomial(n, S, u, d, p[i], False)            ax.scatter(np.arange(n), X)            ax.plot(np.arange(n), X, label="Sim {}".format(i+1))    plt.xlabel("n")    plt.title("Punto 1: 10 Simulaciones")    plt.legend()    #Guardamos la figura en la carpeta del punto y la abrimos    nombreFig1 = './data/Punto6/p1.png'    plt.savefig(nombreFig1,dpi=250)    abrirArchivoOS(nombreTxt1)    abrirArchivoOS(nombreFig1)    #Punto 2 -------------------------------------------------    nombreTxt2 = './data/Punto6/p2Parametros.txt'    r = [-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4]    u = 1.5    d = 0.4    fig = plt.figure(figsize=(8,4),dpi=200)    ax = fig.add_subplot(111)    with open(nombreTxt2, 'w') as writer:        writer.write("PARAMETROS PUNTO 2 \n")        for i in range(n):            writer.write("Simulacion {}: n = {} , S = {} , u = {} , d = {}, r = {} \n".format(i+1, n, S, u, d, r[i]))            X = ArbolTLR(n, S, u, d, r[i], False)            ax.scatter(np.arange(n), X)            ax.plot(np.arange(n), X, label="Sim {}".format(i+1))    plt.xlabel("n")    plt.title("Punto 2: 10 Simulaciones")    plt.legend()    #Guardamos la figura en la carpeta del punto y la abrimos    nombreFig2 = './data/Punto6/p2.png'    plt.savefig(nombreFig2,dpi=250)    abrirArchivoOS(nombreTxt2)    abrirArchivoOS(nombreFig2)    #Punto 3 -------------------------------------------------    sigma = 0.01    fig = plt.figure(figsize=(8,4),dpi=200)    ax = fig.add_subplot(111)    for i in range(n):        X = evolucionPreciosSimetrico(n, sigma, False)        ax.scatter(np.arange(n), X)        ax.plot(np.arange(n), X, label="Sim {}".format(i+1))    textstr = '\n'.join((                r'$\mathrm{n}=%.0f$' % (n, ),                r'$\sigma=%.2f$' % (sigma, )))    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)        # ubicar una leyenda en la parte superior izquierda con los parametros.    ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,                    verticalalignment='top', bbox=props)    plt.xlabel("n")    plt.ylabel("Sn")    plt.title("Punto 3: 10 Simulaciones")    plt.legend()    #Guardamos la figura en la carpeta del punto y la abrimos    nombreFig3 = './data/Punto6/p3.png'    plt.savefig(nombreFig3,dpi=250)    abrirArchivoOS(nombreFig3)    #Punto 4 -------------------------------------------------    fig = plt.figure(figsize=(8,4),dpi=200)    ax = fig.add_subplot(111)    for i in range(n):        X = evolucionPrecioGeneral(n, sigma, u, d ,p[i], False)        ax.scatter(np.arange(n), X)        ax.plot(np.arange(n), X, label="Sim {}".format(i+1))    textstr = '\n'.join((                r'$\mathrm{n}=%.0f$' % (n, ),                r'$\sigma=%.2f$' % (sigma, )))    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)        # ubicar una leyenda en la parte superior izquierda con los parametros.    ax.text(0.05, 0.95, textstr, transform=ax.transAxes, fontsize=14,                    verticalalignment='top', bbox=props)    plt.xlabel("n")    plt.ylabel("Sn")    plt.title("Punto 4: 10 Simulaciones")    plt.legend()    #Guardamos la figura en la carpeta del punto y la abrimos    nombreFig4 = './data/Punto6/p4.png'    plt.savefig(nombreFig4,dpi=250)    abrirArchivoOS(nombreFig4)    #Punto 5 -------------------------------------------------    nombreTxt5 = './data/Punto6/p5Parametros.txt'    nivel = 3    ascenso = 2    TPS = [        [1,-1,5,-1],        [2,1,6,-1],        [3,-1,6,-1],        [4,1,6,-1],        [5,-1,7,-1],        [6,-1,9,-1],        [7,1,8,-1],        [8,-1,9,-1],        [5,-1,9,-1],        [1,1,5,-1],        ]    fig = plt.figure(figsize=(8,4),dpi=200)    ax = fig.add_subplot(111)    with open(nombreTxt5, 'w') as writer:        writer.write("PARAMETROS PUNTO 5 \n")        for i in range(n):            t, X = tiempoAlcance(n, ascenso, p[i], nivel, TPS[i], False)            writer.write("Simulacion {}: n = {} , nivel = {} , ascenso/descenso = {} , p = {} , Tiempo de parada = {} , Tiempo de Alcance = {}\n".format(i+1, n, nivel, ascenso, p[i], TPS[i], t))            ax.scatter(np.arange(n), X)            ax.plot(np.arange(n), X, label="Sim {} T.Alcance = {}".format(i+1, t))            plt.axhline(y=X[0] + (nivel*ascenso), xmin=0, xmax=n)    plt.xlabel("n")    plt.title("Punto 5: 10 Simulaciones")    plt.legend()    #Guardamos la figura en la carpeta del punto y la abrimos    nombreFig5 = './data/Punto6/p5.png'    plt.savefig(nombreFig5,dpi=250)    abrirArchivoOS(nombreTxt5)    abrirArchivoOS(nombreFig5)#Punto 7# Se utiliza la funcion del punto 3 para la simulacion de la evolucion de los precios. def gestion_de_portafolio(n: int, sigma: float, r: float, deltaN: list):    S = evolucionPreciosSimetrico(n, sigma, False)    X = np.arange(n)    X[0] = 0    alerta = False    nAlerta = 0    rAlerta = 0        nombreTxt = './data/Punto7/p7Resumen.txt'    with open(nombreTxt, 'w') as writer:        writer.write("Gestion de portafolio: \n")        writer.write("* Resumen de situaciones al final del archivo. \n")        writer.write("\n")        for i, sn in enumerate(S):            #Esto nos asegura parar sin salirnos del arreglo en la ultima posicion            if(i < len(S) - 1 ):                x = (deltaN[i] * S[i + 1]) + ((1 + r) * (X[i] - (deltaN[i] * sn)))                X[i + 1] = x                rAlerta = X[i] - (deltaN[i] * sn)                if((rAlerta < 0) and i != 0):                    alerta = True                    nAlerta = i                    break            else:                break        writer.write("\n")        writer.write("Resumen de situaciones: \n")        if(alerta):            writer.write("NOTA: Se deben apalancar recursos. \n")            writer.write("Alerta se genero con los siguientes parametros: \n")            writer.write("-------------------- \n")            writer.write("| N = {} \n".format(nAlerta))            writer.write("| Xn - deltaN*Sn = {} \n".format(rAlerta))            writer.write("-------------------- \n")        else:            writer.write(" * No se registraron alertas de apalancamiento. \n")        #Graficamos        fig = plt.figure(figsize=(8,4),dpi=200)        ax = fig.add_subplot(111)        ax.scatter(np.arange(n), X, c='blue',alpha=0.25)        ax.plot(X,c='blue',alpha=0.5,lw=0.5,ls='-',)        plt.title('Punto 7: Gestion de portafolio tipo delta')        plt.xlabel("n")        plt.ylabel("Xn")        plt.axvline(x=nAlerta)        #Guardamos la figura en la carpeta del punto y la abrimos        nombreFig = './data/Punto7/p7PortafolioDelta.png'        plt.savefig(nombreFig,dpi=250)        abrirArchivoOS(nombreFig)        abrirArchivoOS(nombreTxt)    return X        def valoracionDerivado(u: float, d: float, r: float, VN: list):    p = ((1+r) - d)/(u-d)    q = (1-p)    N = len(VN)    V = [None] * N    V[N-1] = VN    for j in reversed(range(N-1)):        V[j] = [None] * (j+1)        for i in range(j+1):            V[j][i] = (p*V[j+1][i]+q*V[j+1][i+1])/(1+r)    #Guardamos el resultado numerico en la carpeta y la abrimos    nombreTxt = './data/Punto8/p8.txt'    with open(nombreTxt, 'w') as writer:        for i in V:            writer.write("%s\n" % i)        #Proceso para abrir el archivo dependiendo del sistema operativo    abrirArchivoOS(nombreTxt)    return V                